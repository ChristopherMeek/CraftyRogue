// Generated by CoffeeScript 1.6.1
(function() {
  var Dungeon, Grid, dungeon,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Grid = (function() {

    function Grid(width, height) {
      var x, y, _i, _j, _ref, _ref1;
      this.width = width;
      this.height = height;
      this.content = [];
      for (x = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        this.content.push([]);
        for (y = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          this.content[x].push(0);
        }
      }
    }

    Grid.prototype.fillRandom = function(fillLevel) {
      var rand, x, y, _i, _j, _ref, _ref1;
      for (x = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          rand = Math.random() < fillLevel ? 1 : 0;
          this.set(x, y, rand);
        }
      }
      return null;
    };

    Grid.prototype.getNeighbourCount = function(x, y) {
      var count, dx, dy, _i, _j, _ref, _ref1;
      count = 0;
      for (dx = _i = -1; _i <= 1; dx = ++_i) {
        if ((0 <= (_ref = x + dx) && _ref < this.width)) {
          for (dy = _j = -1; _j <= 1; dy = ++_j) {
            if (!(dy === 0 && dx === 0)) {
              if ((0 <= (_ref1 = y + dy) && _ref1 < this.height)) {
                count += this.content[x + dx][y + dy];
              } else {
                count += 1;
              }
            }
          }
        } else {
          count += 3;
        }
      }
      return count;
    };

    Grid.prototype.get = function(x, y) {
      return this.content[x][y];
    };

    Grid.prototype.set = function(x, y, value) {
      return this.content[x][y] = value;
    };

    Grid.prototype.print = function() {
      var line, x, y, _i, _j, _ref, _ref1;
      for (y = _i = 0, _ref = this.height; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        line = "";
        for (x = _j = 0, _ref1 = this.width; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          line += this.get(x, y) === 1 ? "." : this.get(x, y);
        }
        console.log(line);
      }
      return null;
    };

    return Grid;

  })();

  Dungeon = (function() {
    var print;

    function Dungeon(width, height) {
      this.width = width;
      this.height = height;
      this.build({
        width: this.width,
        height: this.height,
        fillLevel: 0.4,
        born: [5, 6, 7, 8],
        survive: [3, 4, 5, 6, 7, 8],
        generations: 12
      });
    }

    Dungeon.prototype.build = function(options) {
      var newGrid, x, y, _i, _j, _ref, _ref1;
      if (!options.grid) {
        options.grid = new Grid(options.width, options.height);
        options.grid.fillRandom(options.fillLevel);
      }
      newGrid = new Grid(options.grid.width, options.grid.height);
      for (x = _i = 0, _ref = options.grid.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = options.grid.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          newGrid.set(x, y, this.processRules(x, y, options));
        }
      }
      options.grid = newGrid;
      if (options.generations > 1) {
        --options.generations;
        this.build(options);
      }
      return this.grid = options.grid;
    };

    Dungeon.prototype.processRules = function(x, y, data) {
      var neighbourCount;
      neighbourCount = data.grid.getNeighbourCount(x, y);
      if (__indexOf.call(data.born, neighbourCount) >= 0 && data.grid.get(x, y) === 0) {
        return 1;
      }
      if (__indexOf.call(data.survive, neighbourCount) >= 0 && data.grid.get(x, y) === 1) {
        return 1;
      }
      return 0;
    };

    print = function() {
      return this.grid.print;
    };

    return Dungeon;

  })();

  dungeon = new Dungeon(60, 30);

  dungeon.print;

}).call(this);
